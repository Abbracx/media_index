"""
Django settings for media_index project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import django_stubs_ext


from pathlib import Path
from typing import Any

import environ
import structlog

django_stubs_ext.monkeypatch()
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="3sFAOjncZ0HukbKeZffhdl2tDlWre2N3owDaCL9hEj4n1DkfiPZmcJNQf2RXqWoi",
)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", True)

ALLOWED_HOSTS = ["localhost", "0.0.0.0", "127.0.0.1"]
env.read_env(str(BASE_DIR / ".env"))

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_rq",
    "django_structlog",
    "language_analysis",
    "storages",
    "TMDB",
    "subtitles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_structlog.middlewares.RequestMiddleware",
]

ROOT_URLCONF = "media_index.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "media_index.wsgi.application"

# AWS Settings
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {"default": env.db("DATABASE_URL")}
DATABASES["default"]["ATOMIC_REQUESTS"] = False

REDIS_URL = env("REDIS_URL", default="redis://127.0.0.1:6379/0")
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# CACHES
# ------------------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # Mimicking memcache behavior.
            # https://github.com/jazzband/django-redis#memcached-exceptions-behavior
            "IGNORE_EXCEPTIONS": True,
        },
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json_formatter": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
        },
        "plain_console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(),
        },
        "key_value": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.KeyValueRenderer(
                key_order=["timestamp", "level", "event", "logger"]
            ),
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "plain_console",
        },
        "flat_line_file": {
            "class": "logging.handlers.WatchedFileHandler",
            "filename": "logs/flat.log",
            "formatter": "key_value",
        },
    },
    "loggers": {
        "django_structlog": {
            "handlers": ["console", "flat_line_file", "flat_line_file"],
            "level": "INFO",
        },
        "django_structlog_demo_project": {
            "handlers": ["console", "flat_line_file", "flat_line_file"],
            "level": "INFO",
        },
        "subtitle": {
            "handlers": ["console", "flat_line_file"],
            "level": "INFO",
            "propagate": False,
        },
        "boto3": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": True,
        },
        "botocore": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": True,
        },
        "s3transfer": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": True,
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}


RQ_QUEUES: dict[str, Any] = {
    "tmdb_sync": {
        "URL": REDIS_URL,
        "DEFAULT_TIMEOUT": 28800,  # 8 hours
    },
    "high": {
        "URL": REDIS_URL,
        "DEFAULT_TIMEOUT": 28800,
    },
    "low": {
        "URL": REDIS_URL,
        "DEFAULT_TIMEOUT": 28800,
    },
    "default": {
        "URL": REDIS_URL,
        "DEFAULT_TIMEOUT": 28800,
    },
    "subtitles": {
        "URL": REDIS_URL,
        "DEFAULT_TIMEOUT": 28800,
    },
}

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
    "subtitles": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            # AWS Settings
            "access_key": env("AWS_ACCESS_KEY_ID"),
            "secret_key": env("AWS_SECRET_ACCESS_KEY"),
            "bucket_name": env("AWS_STORAGE_BUCKET_NAME", default="media-index-glite"),
            "region_name": env("AWS_S3_REGION_NAME", default="us-east-1"),
            "default_acl": "private",
            "file_overwrite": False,
            "object_parameters": {
                "CacheControl": "max-age=86400",
            },
            "location": "movies/subtitles",
            "use_threads": True,
            "max_memory_size": 0,
            "signature_version": "s3v4",
            "gzip": True,
        },
    },
}

SUBTITLE_STORAGE = "subtitles"


SUBTITLE_SETTINGS = {
    "OPENSUBTITLES": {
        "OPENSUBTITLES_API_KEY": env("OPENSUBTITLES_API_KEY"),
        "OPENSUBTITLES_USERNAME": env("OPENSUBTITLES_USERNAME"),
        "OPENSUBTITLES_PASSWORD": env("OPENSUBTITLES_PASSWORD"),
        "OPENSUBTITLES_APP_NAME": env("OPENSUBTITLES_APP_NAME"),
        "RATE_LIMIT": 5,
        "MAX_RETRIES": 3,
    },
    "PROCESSING": {
        "MAX_FILE_SIZE": 10 * 1024 * 1024,
        "ALLOWED_EXTENSIONS": [".srt", ".vtt", ".ass", ".ssa"],
    },
}

# Add subtitle queue configuration to RQ settings
RQ_QUEUES["subtitles"] = {"URL": REDIS_URL, "DEFAULT_TIMEOUT": 28800}

# TMDB sync settings
TMDB_SYNC_TIMEOUT = 360  # seconds
TMDB_CACHE_TTL = 30  # days
TMDB_LOG_RETENTION_DAYS = 90
TMDB_MAX_RETRY_ATTEMPTS = 3


structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = "static/"
STATIC_URL = "/staticfiles/"
STATIC_ROOT = str(BASE_DIR / "staticfiles")

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = str(BASE_DIR / "mediafiles")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
TMDB_API_KEY = env("TMDB_API_KEY")
